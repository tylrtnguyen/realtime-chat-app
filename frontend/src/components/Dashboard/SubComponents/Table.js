import React, { useState } from "react";
import { makeStyles, withStyles } from "@material-ui/core/styles";
import Table from "@material-ui/core/Table";
import TableContainer from "@material-ui/core/TableContainer";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import Paper from '@material-ui/core/Paper'
import TablePagination from "@material-ui/core/TablePagination";
import Button from '@material-ui/core/Button';

const StyledTableCell = withStyles(theme => ({
  head: {
    backgroundColor: theme.palette.common.black,
    color: theme.palette.common.white
  },
  body: {
    fontSize: 14
  }
}))(TableCell);

const StyledTableRow = withStyles(theme => ({
  root: {
    "&:nth-of-type(odd)": {
      backgroundColor: theme.palette.background.default
    }
  }
}))(TableRow);

const useStyles = makeStyles(theme => ({
  root: {
    width: '100%'
  },
  marginTop: {
    marginTop: "100px"
  },
  appBarSpacer: theme.mixins.toolbar,
  head: {
    backgroundColor: theme.palette.text.primary,
    color: theme.palette.common.white
  },
  table: {
    minWidth: 700,
    marginTop: "100px"
  }
}));

export const CustomTable = props => {
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(0);
  const { objectArray } = props;
  const classes = useStyles();

  const handleChangePage = (event, newPage) => {
    event.preventDefault();
    setCurrentPage(newPage);
  };

  const handleChangeRowsPerPage = event => {
    setRowsPerPage(+event.target.value);
    setCurrentPage(0);
  };

  const handleEdit = event => {
    event.preventDefault()
    console.log(`clicked!`)
  }

  const renderTableData = () => {
    // Slice the number of row per page to display
    return objectArray.slice(currentPage * rowsPerPage, currentPage * rowsPerPage + rowsPerPage).map((obj, index) => {
      // Get the columns of table object
      let col = Object.keys(obj);
      // Filter out the __v column generated by MongoDB
      let filteredCol = col.filter(col => col !== '__v')
      return (
        <StyledTableRow key={obj._id}>
          {filteredCol.map((val, index) => {
            // index -> index of column
            // Example: eventTable[_id[0]] => Value of id at the 0 index
            return <TableCell key={index}>{obj[filteredCol[index]]}</TableCell>;
          })}
          <TableCell
          key={index}>
          <Button 
            variant="outlined" 
            color="secondary"
            onClick={handleEdit}
          >
            Edit
          </Button>
          </TableCell>
        </StyledTableRow>
      );
    });
  };

  const renderTableHeader = () => {
    // Get the first row of the table array => the header name of that column
    let header = Object.keys(objectArray[0]);
    let filteredHeader = header.filter(head => head !== '__v')
    return filteredHeader.map((key, index) => {
      return <StyledTableCell key={index}>{key.toUpperCase()}</StyledTableCell>;
    });
  };

  return (
    <Paper className={classes.root}>
      <div />
      <TableContainer>
        <Table className={classes.table} size="small">
          <TableHead className={classes.head}>
            <TableRow>{renderTableHeader()}</TableRow>
          </TableHead>
          <TableBody>{renderTableData()}</TableBody>
        </Table>
        </TableContainer>
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          count={objectArray.length}
          rowsPerPage={rowsPerPage}
          page={currentPage}
          onChangePage={handleChangePage}
          onChangeRowsPerPage={handleChangeRowsPerPage}
        />
      </Paper>
  );
};
